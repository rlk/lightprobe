#!/Users/rlk/Build/racket/GRacket.app/Contents/MacOS/GRacket
;; -*- mode: Scheme; -*-

;;;; LIGHTPROBE COMPOSER Copyright (C) 2010 Robert Kooima
;;;;
;;;; This program is free software: you can redistribute it and/or modify it
;;;; under the terms of the GNU General Public License as published by the Free
;;;; Software Foundation, either version 3 of the License, or (at your option)
;;;; any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful, but
;;;; WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
;;;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
;;;; for more details.

(module lp-compose racket/gui
  (require srfi/2)
  (require ffi/unsafe)
  
  ;;----------------------------------------------------------------------------

  (define default-path (string->path "Untitled"))

  ; These are our globals: the lightprobe structure and current path name.

  (define lightprobe #f)
  (define lightprobe-path default-path)

  ; When storing the lightprobe path name, set the frame title as well.
  
  (define (set-lightprobe-path! path)
    (set! lightprobe-path path)
    (send root set-label (path->string path)))

  ;;----------------------------------------------------------------------------
  ;; Rendering and image processing are performed by the graphics hardware via
  ;; the OpenGL Shading Language. This is managed by the lightprobe library, a
  ;; dynamically-loaded native code module written in C. The following FFI
  ;; binds that library API.

  (define lp-lib (ffi-lib "lp-render"))

  (define (lp-ffi str sig)
    (get-ffi-obj str lp-lib sig))

  ;;----------------------------------------------------------------------------
  ;; Those foreign functions that access the OpenGL context must hold the global
  ;; lock during execution. The following definition wraps such functions as
  ;; necessary. The context is set by the canvas when it becomes available.

  (define lp-context #f)

  (define (gl-ffi str sig)
    (let ((fun (lp-ffi str sig)))
      (lambda arg
        (if lp-context
            (send lp-context call-as-current (lambda () (apply fun arg)))
            #f))))

  ;;----------------------------------------------------------------------------
  ;; Lightprobe instantiation

  (define lp-init
    (gl-ffi "lp_init" (_fun          -> _pointer)))
  (define lp-free
    (gl-ffi "lp_free" (_fun _pointer -> _void)))

  ;;----------------------------------------------------------------------------
  ;; Image instancing, selection, and query

  (define lp-add-image  (gl-ffi "lp_add_image"  (_fun _pointer _path -> _int)))
  (define lp-del-image  (gl-ffi "lp_del_image"  (_fun _pointer _int  -> _void)))
  (define lp-sel-image  (lp-ffi "lp_sel_image"  (_fun _pointer _int  -> _void)))

  (define lp-get-width  (lp-ffi "lp_get_width"  (_fun _pointer -> _int)))
  (define lp-get-height (lp-ffi "lp_get_height" (_fun _pointer -> _int)))

  ;;----------------------------------------------------------------------------
  ;; Raw image value accessors

  (define lp-set-value
    (lp-ffi "lp_set_value" (_fun _pointer _int _float -> _void)))
  (define lp-get-value
    (lp-ffi "lp_get_value" (_fun _pointer _int        -> _float)))

  ;;----------------------------------------------------------------------------
  ;; Render and export

  (define lp-render-globe  1)
  (define lp-render-chart  2)
  (define lp-render-polar  4)
  (define lp-render-cube   8)
  (define lp-render-all   16)
  (define lp-render-res   32)
  (define lp-render-grid  64)
  (define lp-render-alpha 256)

  (define lp-render
    (gl-ffi "lp_render"
      (_fun _pointer _int _int _int _float _float _float _float -> _void)))
  (define lp-export
    (gl-ffi "lp_export"
      (_fun _pointer _int _int _path -> _void)))

  ;;----------------------------------------------------------------------------
  ;; Image value accessors

  (define (lp-set-circle-x         v) (lp-set-value lightprobe 0 v))
  (define (lp-set-circle-y         v) (lp-set-value lightprobe 1 v))
  (define (lp-set-circle-radius    v) (lp-set-value lightprobe 2 v))
  (define (lp-set-sphere-elevation v) (lp-set-value lightprobe 3 v))
  (define (lp-set-sphere-azimuth   v) (lp-set-value lightprobe 4 v))
  (define (lp-set-sphere-roll      v) (lp-set-value lightprobe 5 v))

  (define (lp-get-circle-x)           (lp-get-value lightprobe 0))
  (define (lp-get-circle-y)           (lp-get-value lightprobe 1))
  (define (lp-get-circle-radius)      (lp-get-value lightprobe 2))
  (define (lp-get-sphere-elevation)   (lp-get-value lightprobe 3))
  (define (lp-get-sphere-azimuth)     (lp-get-value lightprobe 4))
  (define (lp-get-sphere-roll)        (lp-get-value lightprobe 5))

  (define (lp-add-circle-x         d)
    (lp-set-circle-x         (+ d (lp-get-circle-x))))
  (define (lp-add-circle-y         d)
    (lp-set-circle-y         (+ d (lp-get-circle-y))))
  (define (lp-add-circle-radius    d)
    (lp-set-circle-radius    (+ d (lp-get-circle-radius))))
  (define (lp-add-sphere-elevation d)
    (lp-set-sphere-elevation (+ d (lp-get-sphere-elevation))))
  (define (lp-add-sphere-azimuth   d)
    (lp-set-sphere-azimuth   (+ d (lp-get-sphere-azimuth))))
  (define (lp-add-sphere-roll      d)
    (lp-set-sphere-roll      (+ d (lp-get-sphere-roll))))

  ;;----------------------------------------------------------------------------
  ;; Return the exact integer closest to the given value. This function really
  ;; should be in the standard library.

  (define (round->exact x) (inexact->exact (round x)))

  ;;----------------------------------------------------------------------------
  ;; The Apple HIG defines a preferences panel with all radio and check boxes
  ;; vertically aligned, with a top-right-justified label to the left of each
  ;; group. The preferences-group is a custom layout pane to produce this.
  
  (define preferences-group%
    (class pane%
      (init-field fraction)
      
      (define/override (container-size info)
        (let ((lw (caar   info))
              (lh (cadar  info))
              (rw (caadr  info))
              (rh (cadadr info)))

          (let ((ll (inexact->exact (ceiling (/ lw      fraction))))
                (rr (inexact->exact (ceiling (/ rw (- 1 fraction))))))

            (values (max ll rr) (max lh rh)))))
      
      (define/override (place-children info width height)
        (let ((lw (caar   info))
              (lh (cadar  info))
              (rw (caadr  info))
              (rh (cadadr info))

              (x  (inexact->exact (round (* fraction width)))))
          
            (list (list (- x lw) 0 lw height)
                  (list    x     0 rw height))))
      
      (super-new [stretchable-height #f])))

  ;;----------------------------------------------------------------------------
  ;; simple-radio-box is a radio box with vertical layout and no label. This is
  ;; useful for building preference groups.

  (define simple-radio-box%
    (class radio-box%
      (super-new [label #f] [style '(vertical)])))

  ;;----------------------------------------------------------------------------
  ;; packed-button is a button with no margin. This allows buttons to pack a
  ;; little tighter and look better under OSX.

  (define packed-button%
    (class button%
      (super-new [vert-margin 0] [horiz-margin 0] [stretchable-width #t])))

  ;;----------------------------------------------------------------------------
  ;; drop-list-box is a list-box that accepts drag-and-drop events, allowing a
  ;; callback function to handle them.  TODO: does not work with v5.0.99.4.

  (define drop-list-box%
    (class list-box%
      (init-field drop-callback)

      (define/override (on-drop-file path)
                       (drop-callback path))

      (super-new)
      (send this accept-drop-files #t)))

  ;;----------------------------------------------------------------------------
  ;; drop-frame is a frame that accepts drag-and-drop events, allowing a call-
  ;; back function to handle them.

  (define drop-frame%
    (class frame%
      (init-field drop-callback)

      (define/override (on-drop-file path)
                       (drop-callback path))

      (super-new)
      (send this accept-drop-files #t)))

  ;;----------------------------------------------------------------------------
  ;; The lightprobe viewer has a few variables that tune the rendering. The
  ;; view-values group manages these, with the lightprobe canvas as observer.

  (define view-values%
    (class horizontal-pane%
      (super-new)
      (init-field notify)

      (define width    300)
      (define min-zoom -20)
      (define max-zoom  50)

      ; GUI sub-elements

      (define expo (new slider%   [parent this]
                                  [label "Exposure"]
                                  [init-value  100]
                                  [min-value     0]
                                  [max-value width]
                                  [min-width width]
                                  [stretchable-width #f]
                                  [style '(horizontal plain)]
                                  [callback (lambda x (notify))]))
      (define zoom (new slider%   [parent this]
                                  [label "Zoom"]
                                  [init-value  0]
                                  [min-value min-zoom]
                                  [max-value max-zoom]
                                  [min-width width]
                                  [stretchable-width #f]
                                  [style '(horizontal plain)]
                                  [callback (lambda x (notify))]))
      (define all (new check-box% [parent this]
                                  [label "Show All"]
                                  [stretchable-width #t]
                                  [callback (lambda x (notify))]))

      (define (value->expo v) (* 50.0 (/ v width)))
      (define (value->zoom v) (exp (/ v 10.0)))
      (define (zoom->value z) (* (log z) 10.0))

      ; Public interface

      (define/public (all?) (send all get-value))

      (define/public (get-expo)
        (exact->inexact (value->expo (send expo get-value))))

      (define/public (get-zoom)
        (exact->inexact (value->zoom (send zoom get-value))))

      (define/public (set-zoom z)
        (let ((v (round->exact (zoom->value z))))
          (send zoom set-value (max (min v max-zoom) min-zoom))))))

  ;;----------------------------------------------------------------------------
  ;; The image-list manages the set of lightprobe images input to the composer.
  ;; It allows the addition and removal of images, hiding and showing of loaded
  ;; images, and the selection of a subset of images for configuration.

  (define image-list%
    (class horizontal-pane%
      (super-new)
      (init-field notify)

      ; The "index" is the image's GUI list-box position.

      (define (get-indices)
        (build-list (send images get-number) values))

      (define (get-index s)
        (send images find-string s))
      
      ; The "descr" is the image's lightprobe API descriptor.
    
      (define (index->descr i) (if i (send images get-data i) #f))

      (define (get-descrs) (map index->descr (get-indices)))
      (define (get-descr s)    (index->descr (get-index s)))

      ; Interaction callbacks

      (define (do-add control event)
        (map (lambda (p)
               (send this add-image p))
             (or (get-file-list) '()))
        (notify))

      (define (do-del control event)
        (let ((i (send images get-selection)))
          (if i
              (begin
                (send this del-image i)
                (notify))
              (void))))

      (define (do-sel control event)
        (let ((i (send images get-selection)))
          (if i
              (begin
                (lp-sel-image lightprobe (index->descr i))
                (notify))
              (void))))

      (define (do-cnt control event) (void))

      ; GUI sub-elements

      (define buttons (new vertical-pane% [parent this]
                                          [stretchable-width #f]))
      (define images  (new list-box%      [parent this]
                                          [label #f]
                                          [choices '()]
                                          [callback do-sel]))

      (define add (instantiate packed-button% ("Add"    buttons do-add)))
      (define rem (instantiate packed-button% ("Remove" buttons do-del)))
      (define cnt (instantiate packed-button% ("Center" buttons do-cnt)))

      ; Add (load) the named image.

      (define/public (add-image path)
        (let ((d (lp-add-image lightprobe path)))
          (lp-sel-image lightprobe d)
          (send images append (path->string path) d)
          (send images select (- (send images get-number) 1))
          (notify)
          d))

      ; Remove (unload) the indexed image.

      (define/public (del-image i)
        (let ((d (index->descr i)))
          (lp-del-image lightprobe d)
          (send images delete      i)
          (notify)))

      ; Write the current image state to the named file.

      (define/public (save-file path)
        (let ((write-image
               (lambda (i)
                 (let* ((d (send images get-data   i))
                        (s (send images get-string i)))

                   (lp-sel-image lightprobe d)
                   (printf "~s ~s ~s ~s ~s ~s ~s~n"
                           (lp-get-circle-x)
                           (lp-get-circle-y)
                           (lp-get-circle-radius)
                           (lp-get-sphere-elevation)
                           (lp-get-sphere-azimuth)
                           (lp-get-sphere-roll) s)))))

          (with-output-to-file path
            (lambda () (map write-image (get-indices)))
            #:mode 'text #:exists 'replace))

        (do-sel #f #f)
        (send root set-label (path->string path)))

      ; Load the named file to the current image state.

      (define/public (load-file path)
        (let ((parse-image (lambda (line)
                             (let* ((in (open-input-string line))
                                    (cx (read in))
                                    (cy (read in))
                                    (cr (read in))
                                    (se (read in))
                                    (sa (read in))
                                    (sr (read in))
                                    (nm (read in))
                                    (d (add-image (string->path nm))))

                               (if d (begin
                                       (lp-sel-image lightprobe d)
                                       (lp-set-circle-x         cx)
                                       (lp-set-circle-y         cy)
                                       (lp-set-circle-radius    cr)
                                       (lp-set-sphere-elevation se)
                                       (lp-set-sphere-azimuth   sa)
                                       (lp-set-sphere-roll      sr))
                                   (void))))))

          (let loop ((in (open-input-file path)))
            (let ((line (read-line in)))
              (if (string? line)
                  (begin
                    (parse-image line)
                    (loop in))
                  (void)))))
        
        (send root set-label (path->string path)))

      ; Unload all currently-loaded images.

      (define/public (init-file)
        (if (positive? (send images get-number))
            (begin (send this del-image 0)
                   (init-file))
            (notify)))

      ; Access the current image descriptor.

      (define/public (set-current i)
        (if (< i (send images get-number))
            (begin (send images select i)
                   (notify))
            (void)))

      (define/public (get-current)
        (index->descr (send images get-selection)))))

  ;;----------------------------------------------------------------------------

  (define lp-menu-bar%
    (class menu-bar%
      (super-new)
      (init-field save-file)
      (init-field load-file)
      (init-field init-file)
      (init-field get-flags)
      (init-field goto)
      (init-field notify)

      (define (get-shifted-shortcut-prefix)
        (cons 'shift  (get-default-shortcut-prefix)))
      (define (get-optional-shortcut-prefix)
        (cons 'option (get-default-shortcut-prefix)))

      ;; -----------------------------------------------------------------------
      ;; File Menu

      (let ((file (new menu% [parent this] [label "File"])))

        ;; File / New
        
        (define (do-new control event)
          (init-file)
          (set-lightprobe-path! default-path))

        ;; File / Open

        (define (do-open control event)
          (let ((path (get-file #f root)))
            (if path
                (begin
                  (init-file)
                  (set-lightprobe-path! path)
                  (load-file lightprobe-path))
                (void))))

        ;; ---------------------------------------------------------------------
        ;; File / Save

        (define (do-save control event)
          (save-file lightprobe-path))

        ;; File / Save As...

        (define (do-save-as control event)
          (let ((path (put-file #f root)))
            (if path
                (begin
                  (set-lightprobe-path! path)
                  (save-file lightprobe-path))
                (void))))

        ;; ---------------------------------------------------------------------

        ;; File / Export

        ;; (define (do-export func)

        ;;   (let ((get-opts (lambda (name)
        ;;                     (let ((dialog (new lp-export-dialog% [name name])))
        ;;                       (send dialog show #t)
        ;;                       (let ((alpha (send dialog get-alpha))
        ;;                             (size  (send dialog get-value)))
        ;;                         (list size alpha))))))

        ;;   (and-let* ((path  (put-file #f root #f #f "tif"))
        ;;              (opts  (get-opts (path->string path)))
        ;;              (size  (first  opts)))

        ;;             (begin-busy-cursor)
        ;;             (func lightprobe path size (get-flags (second opts)))
        ;;             (end-busy-cursor))))

        (define (do-export flag)
          #t)

        (define (do-export-chart control event) (do-export lp-render-chart))
        (define (do-export-polar control event) (do-export lp-render-polar))
        (define (do-export-cube  control event) (do-export lp-render-cube))

        ;; ---------------------------------------------------------------------

        (new menu-item% [parent file]
                        [label "New"]
                        [callback do-new]
                        [shortcut #\n])
        (new menu-item% [parent file]
                        [label "Open..."]
                        [callback do-open]
                        [shortcut #\o])

        (new separator-menu-item% [parent file]) ; -----------------------------

        (new menu-item% [parent file]
                        [label "Save"]
                        [callback do-save]
                        [shortcut #\s])
        (new menu-item% [parent file]
                        [label "Save As..."]
                        [callback do-save-as]
                        [shortcut #\s]
                        [shortcut-prefix (get-shifted-shortcut-prefix)])

        (new separator-menu-item% [parent file]) ; -----------------------------

        (new menu-item% [parent file]
                        [label "Export Cube Map..."]
                        [callback do-export-cube]
                        [shortcut #\e])
        (new menu-item% [parent file]
                        [label "Export Dome Master..."]
                        [callback do-export-polar]
                        [shortcut #\e]
                        [shortcut-prefix (get-shifted-shortcut-prefix)])
        (new menu-item% [parent file]
                        [label "Export Sphere Map..."]
                        [callback do-export-chart]
                        [shortcut #\e]
                        [shortcut-prefix (get-optional-shortcut-prefix)]))

      ;; -----------------------------------------------------------------------
      ;; View Menu

      (define view (new menu% [parent this] [label "View"]))

      (define mode-0 (new checkable-menu-item%
                          [parent view]
                          [label "Source Image"]
                          [shortcut #\1]
                          [checked #t]
                          [callback (lambda x (set-mode 0))]))
      (define mode-1 (new checkable-menu-item%
                          [parent view]
                          [label "Perspective view"]
                          [shortcut #\2]
                          [checked #f]
                          [callback (lambda x (set-mode 1))]))
      (define mode-2 (new checkable-menu-item%
                          [parent view]
                          [label "Sphere map"]
                          [shortcut #\3]
                          [checked #f]
                          [callback (lambda x (set-mode 2))]))
      (define mode-3 (new checkable-menu-item%
                          [parent view]
                          [label "Polar map"]
                          [shortcut #\4]
                          [checked #f]
                          [callback (lambda x (set-mode 3))]))

      (new separator-menu-item% [parent view]) ; -------------------------------

      (define reso-f (new checkable-menu-item%
                          [parent view]
                          [label "Image Pixels"]
                          [shortcut #\p]
                          [checked #t]
                          [callback (lambda x (set-reso #f))]))
      (define reso-t (new checkable-menu-item%
                          [parent view]
                          [label "Image Resolution"]
                          [shortcut #\r]
                          [checked  #f]
                          [callback (lambda x (set-reso #t))]))

      (new separator-menu-item% [parent view]) ; -------------------------------

      (define grid-t (new checkable-menu-item%
                          [parent view]
                          [label "Grid"]
                          [shortcut #\g]
                          [checked  #f]
                          [callback (lambda x (notify))]))
        
      (new separator-menu-item% [parent view]) ; -------------------------------

      (new menu-item% [parent view]
                      [label "Image 1"]
                      [shortcut #\1]
                      [callback (lambda x (goto 0))]
                      [shortcut-prefix (get-optional-shortcut-prefix)])
      (new menu-item% [parent view]
                      [label "Image 2"]
                      [shortcut #\2]
                      [callback (lambda x (goto 1))]
                      [shortcut-prefix (get-optional-shortcut-prefix)])
      (new menu-item% [parent view]
                      [label "Image 3"]
                      [shortcut #\3]
                      [callback (lambda x (goto 2))]
                      [shortcut-prefix (get-optional-shortcut-prefix)])

      (define (set-mode i)
        (send mode-0 check (= i 0))
        (send mode-1 check (= i 1))
        (send mode-2 check (= i 2))
        (send mode-3 check (= i 3))
        (notify))

      (define (set-reso b)
        (send reso-t check b)
        (send reso-f check (not b))
        (notify))

      (define/public (reso?) (send reso-t is-checked?))
      (define/public (grid?) (send grid-t is-checked?))
      (define/public (mode)
        (cond ((send mode-0 is-checked?) 0)
              ((send mode-1 is-checked?) 1)
              ((send mode-2 is-checked?) 2)
              ((send mode-3 is-checked?) 3)))))
              

  ;;----------------------------------------------------------------------------

  ;; Canvas mouse event interpretation is complicated by a number of issues.
  ;; First and foremost it provides a fluid interaction for the power user,
  ;; replicating some of the on-screen GUI elements. However, it must do so
  ;; on a variety of platforms, but the Control modifier invokes right click
  ;; in OSX and the Alt modifier invokes a window manager operation in Gnome.
  ;; Option is "alt" under OSX, but Alt is "meta" under Linux and Windows.
  ;;
  ;; The following configuration attempts to work around this compatibility
  ;; minefield through careful mapping and the use of Option to simulate middle
  ;; click under OSX.
  ;;
  ;;   Left  ... Circle move or Sphere rotate, depending on mode.
  ;; S-Left  ... Sphere roll
  ;; A-Left  ... Circle size (OSX)
  ;;  Middle ... Circle size (Linux / Win)
  ;;   Right ... View pan or rotate, depending on mode
  ;; S-Right ... View zoom

  (define (get-click-op event circle?)
    (let ((type    (send event get-event-type))
          (shift?  (send event get-shift-down))
          (alt?    (send event get-alt-down)))

      (case type
        ((left-down)  (cond (alt?    'circle-size)
                            (shift?  'sphere-roll)
                            (circle? 'circle-move)
                            (else    'sphere-rot)))
        ((middle-down)               'circle-size)
        ((right-down) (cond (shift?  'view-zoom)
                            (circle? 'view-pan)
                            (else    'view-rot)))
        (else #f))))

  ;; The lp-canvas handles all lightprobe rendering. As creator of the OpenGL
  ;; context, it directs the startup and initialization of all lightprobe
  ;; resources. It receives a number of thunks for use in marshalling rendering
  ;; parameters, and implements all mouse and scroll bar interaction.

  (define lp-canvas%
    (class canvas%
      (inherit refresh with-gl-context swap-gl-buffers)

      (init-field load-file)
      (init-field set-zoom)
      (init-field get-zoom)
      (init-field get-expo)
      (init-field get-image)
      (init-field get-flags)
      (init-field mode)

      (super-new [style '(gl hscroll vscroll no-autoclear)])

      (send this init-manual-scrollbars 1000 1000 1000 1000 0 0)

      ;; Compute the normalized scroll position: position / range.

      (define (get-x)
        (let ((x (send this get-scroll-pos   'horizontal))
              (w (send this get-scroll-range 'horizontal)))
          (if (positive? w)
              (exact->inexact (/ x w))
              0.0)))

      (define (get-y)
        (let ((y (send this get-scroll-pos   'vertical))
              (h (send this get-scroll-range 'vertical)))
          (if (positive? h)
              (exact->inexact (/ y h))
              0.0)))

      ;; Compute the virtual scene size for the given mode and zoom.

      (define (get-w)
        (let ((ww (* 2 (send this get-width))))
          (if (positive? (mode))
              (max 1  (round->exact (* (get-zoom) (lp-get-width  lightprobe))))
              (max ww (round->exact (* (get-zoom) ww))))))

      (define (get-h)
        (let ((hh (* 2 (send this get-height))))
          (if (positive? (mode))
              (max 1  (round->exact (* (get-zoom) (lp-get-height lightprobe))))
              (max hh (round->exact (* (get-zoom) hh))))))

      ;; The center of the image should not move during zooming.  Thus, the
      ;; pan must be adjusted as image and zoom parameters change.  To make
      ;; this possible, we track the current image center in normalized image
      ;; coordinates, updating it with each reshape and scroll.

      (define center-x 0.5)
      (define center-y 0.5)

      (define (recenter)
        (let* ((iw (get-w))
               (ih (get-h))
               (ww (send this get-width))
               (wh (send this get-height))
               (sx (send this get-scroll-pos 'horizontal))
               (sy (send this get-scroll-pos 'vertical)))

          (set! center-x (/ (+ sx (/ ww 2)) iw))
          (set! center-y (/ (+ sy (/ wh 2)) ih))))

      ; The reshape function is responsible for handling changes to the shape
      ; of the canvas.  Beyond changes to the shape of the parent window, this
      ; may occur in response to additions, deletions, and visibility changes
      ; among the current set of loaded images.  The primary task is to ensure
      ; that the scroll bars make sense given the content currently on display.
      ; With this done, cache the image center and trigger a re-paint.

      (define/public (reshape)
        (let* ((iw (get-w))
               (ih (get-h))
               (ww (send this get-width))
               (wh (send this get-height))

               (nw (max 0 (- iw ww)))
               (nh (max 0 (- ih wh)))
               (nx (round->exact (max 0 (- (* center-x iw) (/ ww 2)))))
               (ny (round->exact (max 0 (- (* center-y ih) (/ wh 2))))))

          (send this set-scroll-page  'horizontal ww)
          (send this set-scroll-range 'horizontal nw)
          (send this set-scroll-pos   'horizontal nx)
          (send this set-scroll-page  'vertical   wh)
          (send this set-scroll-range 'vertical   nh)
          (send this set-scroll-pos   'vertical   ny)

          (recenter)
          (refresh)))

      ; Left mouse button events configure the current image, while right mouse
      ; events act as shortcuts to panning and zooming. 

      (define click-op      #f)
      (define click-x        0)
      (define click-y        0)
      (define click-z        0)
      (define click-scroll-x 0)
      (define click-scroll-y 0)
      (define last-x         0)
      (define last-y         0)

      (define/override (on-event event)
        (let* ((type   (send event get-event-type))
               (shift? (send event get-shift-down))
               (cx     (send event get-x))
               (cy     (send event get-y))
               (cz     (get-zoom))
               (sx     (send this get-scroll-pos 'horizontal))
               (sy     (send this get-scroll-pos 'vertical))
               (dx     (/ (- cx last-x) cz))
               (dy     (/ (- cy last-y) cz)))

          (case type

            ((left-down middle-down right-down)
             (set! click-x        cx)
             (set! click-y        cy)
             (set! last-x         cx)
             (set! last-y         cy)
             (set! click-z        cz)
             (set! click-scroll-x sx)
             (set! click-scroll-y sy)
             (set! click-op (get-click-op event (zero? (mode)))))

            ((motion)
             (case click-op

               ((circle-move)
                (lp-add-circle-x dx)
                (lp-add-circle-y dy)
                (refresh))

               ((circle-size)
                (lp-add-circle-radius (* 0.1 dy))
                (refresh))
            
               ((sphere-rot)
                (lp-add-sphere-azimuth   (* 0.1 dx))
                (lp-add-sphere-elevation (* 0.1 dy))
                (refresh))

               ((sphere-roll)
                (lp-add-sphere-roll (* 0.1 dy))
                (refresh))

               ((view-pan)
                (let* ((nx (+ click-scroll-x (- click-x cx)))
                       (ny (+ click-scroll-y (- click-y cy))))
                  (send this set-scroll-pos 'horizontal nx)
                  (send this set-scroll-pos 'vertical   ny)
                  (recenter)
                  (reshape)))

               ((view-rot)
                (let* ((nw (send this get-scroll-range 'horizontal))
                       (nx (+ click-scroll-x (- click-x cx)))
                       (ny (+ click-scroll-y (- click-y cy)))
                       (xx (round->exact (modulo nx nw))))
                  (send this set-scroll-pos 'horizontal xx)
                  (send this set-scroll-pos 'vertical   ny)
                  (recenter)
                  (reshape)))

               ((view-zoom)
                (set-zoom (max 0.1 (+ click-z (/ (- click-y cy) 50))))
                (reshape))

               (else (void))))

            (else (set! click-op #f)))

          (set! last-x cx)
          (set! last-y cy)))

      ; Scroll events and canvas resizes must recache the image center and
      ; update the display.
      
      (define/override (on-scroll event) (recenter) (send this refresh))
      (define/override (on-size   w h)   (recenter) (send this reshape))

      ; The on-paint function redraws the canvas.  This involves marshalling
      ; all of the parameters maintained by other GUI elements and calling the
      ; proper render function for the current view mode.

      (define/override (on-paint)
        (let-values (((w h) (send this get-client-size)))
          (let ((x (get-x))
                (y (get-y))
                (e (get-expo))
                (z (get-zoom))
                (f (get-flags #f)))

            (lp-render lightprobe f w h x y e z)

            (with-gl-context (lambda () (swap-gl-buffers))))))

      ; OpenGL use must wait until the canvas has been shown and the context
      ; created. Do all lightprobe and image state initialization here. Load
      ; any data file listed on the command line.

      (define/override (on-superwindow-show shown?)
        (if shown?
            (let ((ctx (send (send this get-dc) get-gl-context))
                  (arg (current-command-line-arguments)))

              (set! lp-context ctx)
              (set! lightprobe (lp-init))

              (if (and (vector? arg) (positive? (vector-length arg)))

                  (let ((path (string->path (vector-ref arg 0))))
                    (load-file            path)
                    (set-lightprobe-path! path))

                  (void))) (void)))))

  ;;----------------------------------------------------------------------------

  (define lp-export-dialog%
    (class dialog%
      (super-new [parent root]
                 [label "Export"]
                 [min-width  300]
                 [min-height 120])

      (init-field name)
      (define state #f)

      (new message% [parent this] [label name] [vert-margin 8])

      (define opts        (new group-box-panel% [parent this]
                                                [label "Options"]))
      (define size-text   (new text-field%      [parent opts]
                                                [label "Image Size:"]
                                                [init-value "1024"]))
      (define alpha-check (new check-box%       [parent opts]
                                                [label "Alpha Channel"]
                                                [value #f]))

      (define buttons (new horizontal-pane% [parent this]))

      (new pane%   [parent buttons])
      (new button% [parent buttons]
                   [label "Cancel"]
                   [callback (lambda x (set! state #f) (send this show #f))])
      (new button% [parent buttons]
                   [label "Export"]
                   [style '(border)]
                   [callback (lambda x (set! state #t) (send this show #f))])

      (define/public (get-alpha) (send alpha-check get-value))
      (define/public (get-value)
        (if state (string->number (send size-text get-value)) #f))))

  ;;----------------------------------------------------------------------------

  ;; The lp-frame is the toplevel window of the application, and the overall
  ;; organizing structure through which all state changes flow. All GUI sub-
  ;; groups are instantiated as members and a variety of anonymous functions
  ;; are closed within this scope to provide cross-cutting access between
  ;; sub-elements of the application.

  (define lp-frame%
    (class drop-frame%
      (super-new [label (path->string default-path)]
                 [drop-callback (lambda (path) (send images add-image path))])

      ; Layout panes

      (define top (new horizontal-pane% [parent this] [stretchable-height #f]))
      (define mid (new horizontal-pane% [parent this] [stretchable-height #t]))
      (define bot (new horizontal-pane% [parent this] [stretchable-height #f]))

      (define img (new group-box-panel% [parent top]
                                        [label "Images"]
                                        [stretchable-width #t]))

      ; GUI elements

      (define menus
        (new lp-menu-bar%
             [parent this]
             [save-file (lambda (path) (send images save-file path))]
             [load-file (lambda (path) (send images load-file path))]
             [init-file (lambda ()     (send images init-file))]
             [get-flags (lambda (f)    (get-flags f))]
             [goto      (lambda (i)    (send images set-current i))]
             [notify    (lambda ()     (send canvas reshape))]))

      (define canvas
        (new lp-canvas%
             [parent mid]
             [min-width  800]
             [min-height 600]
             [load-file (lambda (path) (send images load-file path))]
             [set-zoom  (lambda (z)    (send values set-zoom z))]
             [get-zoom  (lambda ()     (send values get-zoom))]
             [get-expo  (lambda ()     (send values get-expo))]
             [get-image (lambda ()     (send images get-current))]
             [get-flags (lambda (f)    (get-flags f))]
             [mode      (lambda ()     (send menus mode))]))

      (define images
        (new image-list%
             [parent img]
             [notify (lambda () (send canvas reshape))]))

      (define values
        (new view-values%
             [parent bot]
             [notify (lambda () (send canvas reshape))]))

      (define (get-flags alpha?)
        (let ((m (send menus mode)))
        (bitwise-ior (if (= m 1)            lp-render-globe 0)
                     (if (= m 2)            lp-render-chart 0)
                     (if (= m 3)            lp-render-polar 0)
                     (if (send values all?) lp-render-all   0)
                     (if (send menus reso?) lp-render-res   0)
                     (if (send menus grid?) lp-render-grid  0)
                     (if alpha?             lp-render-alpha 0))))))
  
  ;;----------------------------------------------------------------------------

  ;; Instantiate the application.

  (define root (new lp-frame%))
  
  ;; Show the application window.

  (send root show #t))

  ;;----------------------------------------------------------------------------
